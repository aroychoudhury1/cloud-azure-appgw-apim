#Log in to Azure
Connect-AzAccount

#Set the desired subscription
$subscriptionId = "00000000-0000-0000-0000-000000000000" # GUID of your Azure subscription
Get-AzSubscription -Subscriptionid $subscriptionId | Select-AzSubscription

#Set up resource group
$resGroupName = "rg-appgw-apim" # resource group name
$location = "West Europe"           # Azure region
New-AzResourceGroup -Name $resGroupName -Location $location

#Set up NSG, NSG rules for Application Gateway & API-M Subnets
$appGwRule1 = New-AzNetworkSecurityRuleConfig -Name appgw-in -Description "AppGw inbound" `
    -Access Allow -Protocol * -Direction Inbound -Priority 100 -SourceAddressPrefix `
    GatewayManager -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 65200-65535
$appGwNsg = New-AzNetworkSecurityGroup -ResourceGroupName $resGroupName -Location $location -Name `
    "NSG-APPGW" -SecurityRules $appGwRule1

$apimRule1 = New-AzNetworkSecurityRuleConfig -Name apim-in -Description "APIM inbound" `
    -Access Allow -Protocol Tcp -Direction Inbound -Priority 100 -SourceAddressPrefix `
    ApiManagement -SourcePortRange * -DestinationAddressPrefix VirtualNetwork -DestinationPortRange 3443
$apimNsg = New-AzNetworkSecurityGroup -ResourceGroupName $resGroupName -Location $location -Name `
    "NSG-APIM" -SecurityRules $apimRule1
	
#Set up subnets & virtual network
$appGatewaySubnet = New-AzVirtualNetworkSubnetConfig -Name "appGatewaySubnet" -NetworkSecurityGroup $appGwNsg -AddressPrefix "10.0.0.0/24"
$apimSubnet = New-AzVirtualNetworkSubnetConfig -Name "apimSubnet" -NetworkSecurityGroup $apimNsg -AddressPrefix "10.0.1.0/24"
$vnet = New-AzVirtualNetwork -Name "appgw-apim-vnet" -ResourceGroupName $resGroupName `
  -Location $location -AddressPrefix "10.0.0.0/16" -Subnet $appGatewaySubnet,$apimSubnet
$appGatewaySubnetData = $vnet.Subnets[0]
$apimSubnetData = $vnet.Subnets[1]

#Create API Mangement instance in Internal Mode inside API-M Subnet
$apimVirtualNetwork = New-AzApiManagementVirtualNetwork -SubnetResourceId $apimSubnetData.Id

$apimServiceName = "apimgmt-example-we-01"       # API Management service instance name, must be globally unique
$apimOrganization = "Example"         # organization name
$apimAdminEmail = "admin@example.com" # administrator's email address
$apimService = New-AzApiManagement -ResourceGroupName $resGroupName -Location $location -Name $apimServiceName -Organization $apimOrganization -AdminEmail $apimAdminEmail -VirtualNetwork $apimVirtualNetwork -VpnType "Internal" -Sku "Developer"

$gatewayHostname = "apimgmt-example-we-01.api.azure-api.example.net"
$portalHostname = "apimgmt-example-we-01.developer.azure-api.example.net"
$legacyPortalHostname = "apimgmt-example-we-01.portal.azure-api.example.net" 
$managementHostname = "apimgmt-example-we-01.management.azure-api.example.net" 

#Self Signed Certificate Setup
$root = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
    -Subject "CN=api-azure-api-example-net-signing-root" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 4096 `
    -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign `
    -KeyUsage CertSign -NotAfter (get-date).AddYears(5)

$ssl = New-SelfSignedCertificate -Type Custom -DnsName "*.api.azure-api.example.net","api.azure-api.example.net" `
    -KeySpec Signature `
    -Subject "CN=*.api.azure-api.example.net" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -Signer $root

# Export CER of the root and SSL certs
Export-Certificate -Type CERT -Cert $root -FilePath C:\Certs\example\example-gateway-signing-root.cer
Export-Certificate -Type CERT -Cert $ssl -FilePath C:\Certs\example\example-gateway-ssl.cer
# Export PFX of the root and SSL certs
Export-PfxCertificate -Cert $root -FilePath C:\Certs\example\example-gateway-signing-root.pfx `
    -Password (read-host -AsSecureString -Prompt "password")
Export-PfxCertificate -Cert $ssl -FilePath C:\Certs\example\example-gateway-ssl.pfx `
    -ChainOption BuildChain -Password (read-host -AsSecureString -Prompt "password")

$root = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
    -Subject "CN=developer-azure-api-example-net-signing-root" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 4096 `
    -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign `
    -KeyUsage CertSign -NotAfter (get-date).AddYears(5)

$ssl = New-SelfSignedCertificate -Type Custom -DnsName "*.developer.azure-api.example.net","developer.azure-api.example.net" `
    -KeySpec Signature `
    -Subject "CN=*.developer.azure-api.example.net" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -Signer $root

# Export CER of the root and SSL certs
Export-Certificate -Type CERT -Cert $root -FilePath C:\Certs\example\example-dev-portal-signing-root.cer
Export-Certificate -Type CERT -Cert $ssl -FilePath C:\Certs\example\example-dev-portal-ssl.cer
# Export PFX of the root and SSL certs
Export-PfxCertificate -Cert $root -FilePath C:\Certs\example\example-dev-portal-signing-root.pfx `
    -Password (read-host -AsSecureString -Prompt "password")
Export-PfxCertificate -Cert $ssl -FilePath C:\Certs\example\example-dev-portal-ssl.pfx `
    -ChainOption BuildChain -Password (read-host -AsSecureString -Prompt "password")

$root = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
    -Subject "CN=portal-azure-api-example-net-signing-root" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 4096 `
    -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign `
    -KeyUsage CertSign -NotAfter (get-date).AddYears(5)

$ssl = New-SelfSignedCertificate -Type Custom -DnsName "*.portal.azure-api.example.net","portal.azure-api.example.net" `
    -KeySpec Signature `
    -Subject "CN=*.portal.azure-api.example.net" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -Signer $root

# Export CER of the root and SSL certs
Export-Certificate -Type CERT -Cert $root -FilePath C:\Certs\example\example-legacy-portal-signing-root.cer
Export-Certificate -Type CERT -Cert $ssl -FilePath C:\Certs\example\example-legacy-portal-ssl.cer
# Export PFX of the root and SSL certs
Export-PfxCertificate -Cert $root -FilePath C:\Certs\example\example-legacy-portal-signing-root.pfx `
    -Password (read-host -AsSecureString -Prompt "password")
Export-PfxCertificate -Cert $ssl -FilePath C:\Certs\example\example-legacy-portal-ssl.pfx `
    -ChainOption BuildChain -Password (read-host -AsSecureString -Prompt "password")

$root = New-SelfSignedCertificate -Type Custom -KeySpec Signature `
    -Subject "CN=management-azure-api-example-net-signing-root" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 4096 `
    -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign `
    -KeyUsage CertSign -NotAfter (get-date).AddYears(5)

$ssl = New-SelfSignedCertificate -Type Custom -DnsName "*.management.azure-api.example.net","management.azure-api.example.net" `
    -KeySpec Signature `
    -Subject "CN=*.management.azure-api.example.net" -KeyExportPolicy Exportable `
    -HashAlgorithm sha256 -KeyLength 2048 `
    -CertStoreLocation "Cert:\CurrentUser\My" `
    -Signer $root

# Export CER of the root and SSL certs
Export-Certificate -Type CERT -Cert $root -FilePath C:\Certs\example\example-management-signing-root.cer
Export-Certificate -Type CERT -Cert $ssl -FilePath C:\Certs\example\example-management-ssl.cer
# Export PFX of the root and SSL certs
Export-PfxCertificate -Cert $root -FilePath C:\Certs\example\example-management-signing-root.pfx `
    -Password (read-host -AsSecureString -Prompt "password")
Export-PfxCertificate -Cert $ssl -FilePath C:\Certs\example\example-management-ssl.pfx `
    -ChainOption BuildChain -Password (read-host -AsSecureString -Prompt "password")

$gatewayHostnameConfig = New-AzApiManagementCustomHostnameConfiguration -Hostname $gatewayHostname `
  -HostnameType Proxy -KeyVaultId "https://kv-example-we-01.vault.azure.net/secrets/example-gateway-ssl"
 $portalHostnameConfig = New-AzApiManagementCustomHostnameConfiguration -Hostname $portalHostname `
  -HostnameType DeveloperPortal -KeyVaultId "https://kv-example-we-01.vault.azure.net/secrets/example-dev-portal-ssl"
$managementHostnameConfig = New-AzApiManagementCustomHostnameConfiguration -Hostname $managementHostname `
  -HostnameType Management -KeyVaultId "https://kv-example-we-01.vault.azure.net/secrets/example-management-ssl"
  
$apimService.ProxyCustomHostnameConfiguration = $gatewayHostnameConfig
$apimService.PortalCustomHostnameConfiguration = $portalHostnameConfig
$apimService.ManagementCustomHostnameConfiguration = $managementHostnameConfig

Set-AzApiManagement -InputObject $apimService

$myApiZone = New-AzPrivateDnsZone -Name "api.azure-api.example.net" -ResourceGroupName $resGroupName 
$linkApiZone = New-AzPrivateDnsVirtualNetworkLink -ZoneName api.azure-api.example.net `
  -ResourceGroupName $resGroupName -Name "api-apim-vnet-dns-zone-link" `
  -VirtualNetworkId $vnet.id
  
$myDevPortalZone = New-AzPrivateDnsZone -Name "developer.azure-api.example.net" -ResourceGroupName $resGroupName 
$linkDevPortalZone = New-AzPrivateDnsVirtualNetworkLink -ZoneName developer.azure-api.example.net `
  -ResourceGroupName $resGroupName -Name "dev-portal-apim-vnet-dns-zone-link" `
  -VirtualNetworkId $vnet.id
  
$myLegacyDevPortalZone = New-AzPrivateDnsZone -Name "portal.azure-api.example.net" -ResourceGroupName $resGroupName 
$linkLegacyDevPortalZone = New-AzPrivateDnsVirtualNetworkLink -ZoneName portal.azure-api.example.net `
  -ResourceGroupName $resGroupName -Name "legacy-dev-portal-apim-vnet-dns-zone-link" `
  -VirtualNetworkId $vnet.id

$myManagementZone = New-AzPrivateDnsZone -Name "management.azure-api.example.net" -ResourceGroupName $resGroupName 
$linkManagementZone = New-AzPrivateDnsVirtualNetworkLink -ZoneName management.azure-api.example.net `
  -ResourceGroupName $resGroupName -Name "management-apim-vnet-dns-zone-link" `
  -VirtualNetworkId $vnet.id

$apimIP = $apimService.PrivateIPAddresses[0]

New-AzPrivateDnsRecordSet -Name apimgmt-example-we-01 -RecordType A -ZoneName api.azure-api.example.net `
  -ResourceGroupName $resGroupName -Ttl 10 `
  -PrivateDnsRecords (New-AzPrivateDnsRecordConfig -IPv4Address $apimIP)
  
New-AzPrivateDnsRecordSet -Name apimgmt-example-we-01 -RecordType A -ZoneName developer.azure-api.example.net `
  -ResourceGroupName $resGroupName -Ttl 10 `
  -PrivateDnsRecords (New-AzPrivateDnsRecordConfig -IPv4Address $apimIP)

New-AzPrivateDnsRecordSet -Name apimgmt-example-we-01 -RecordType A -ZoneName portal.azure-api.example.net `
  -ResourceGroupName $resGroupName -Ttl 10 `
  -PrivateDnsRecords (New-AzPrivateDnsRecordConfig -IPv4Address $apimIP)
  
New-AzPrivateDnsRecordSet -Name apimgmt-example-we-01 -RecordType A -ZoneName management.azure-api.example.net `
  -ResourceGroupName $resGroupName -Ttl 10 `
  -PrivateDnsRecords (New-AzPrivateDnsRecordConfig -IPv4Address $apimIP)

#Steps to set up Application Gateway
$publicip = New-AzPublicIpAddress -ResourceGroupName $resGroupName `
  -name "publicIP01" -location $location -AllocationMethod Static -Sku Standard
  
$gipconfig = New-AzApplicationGatewayIPConfiguration -Name "gatewayIP01" -Subnet $appGatewaySubnetData
$fp01 = New-AzApplicationGatewayFrontendPort -Name "port01"  -Port 443
$fipconfig01 = New-AzApplicationGatewayFrontendIPConfig -Name "frontend1" -PublicIPAddress $publicip

$secret = Get-AzKeyVaultSecret -VaultName "kv-example-we-01" -Name "example-gateway-ssl"
$secretId = $secret.Id.Replace($secret.Version, "")
$certGateway = New-AzApplicationGatewaySslCertificate -Name "gatewaycert" `
  -KeyVaultSecretId $secretId

$portalSecret = Get-AzKeyVaultSecret -VaultName "kv-example-we-01" -Name "example-dev-portal-ssl"
$portalSecretId = $portalSecret.Id.Replace($secret.Version, "")
$certPortal = New-AzApplicationGatewaySslCertificate -Name "portalcert" `
  -KeyVaultSecretId $portalSecretId

$legacyPortalSecret = Get-AzKeyVaultSecret -VaultName "kv-example-we-01" -Name "example-legacy-portal-ssl"
$legacyPortalSecretId = $legacyPortalSecret.Id.Replace($secret.Version, "")
$legacyCertPortal = New-AzApplicationGatewaySslCertificate -Name "legacyportalcert" `
  -KeyVaultSecretId $legacyPortalSecretId

$managementSecret = Get-AzKeyVaultSecret -VaultName "kv-example-we-01" -Name "example-management-ssl"
$managementSecretId = $legacyPortalSecret.Id.Replace($secret.Version, "")
$certManagement = New-AzApplicationGatewaySslCertificate -Name "managementcert" `
  -KeyVaultSecretId $managementSecretId
  
$gatewayListener = New-AzApplicationGatewayHttpListener -Name "gatewaylistener" `
  -Protocol "Https" -FrontendIPConfiguration $fipconfig01 -FrontendPort $fp01 `
  -SslCertificate $certGateway -HostName $gatewayHostname -RequireServerNameIndication true
$portalListener = New-AzApplicationGatewayHttpListener -Name "portallistener" `
  -Protocol "Https" -FrontendIPConfiguration $fipconfig01 -FrontendPort $fp01 `
  -SslCertificate $certPortal -HostName $portalHostname -RequireServerNameIndication true
$legacyPortalListener = New-AzApplicationGatewayHttpListener -Name "legacyportallistener" `
  -Protocol "Https" -FrontendIPConfiguration $fipconfig01 -FrontendPort $fp01 `
  -SslCertificate $legacyCertPortal -HostName $legacyPortalHostname -RequireServerNameIndication true
$managementListener = New-AzApplicationGatewayHttpListener -Name "managementlistener" `
  -Protocol "Https" -FrontendIPConfiguration $fipconfig01 -FrontendPort $fp01 `
  -SslCertificate $certManagement -HostName $managementHostname -RequireServerNameIndication true

$apimGatewayProbe = New-AzApplicationGatewayProbeConfig -Name "apimgatewayprobe" `
  -Protocol "Https" -HostName $gatewayHostname -Path "/status-0123456789abcdef" `
  -Interval 30 -Timeout 60 -UnhealthyThreshold 4
$apimPortalProbe = New-AzApplicationGatewayProbeConfig -Name "apimportalprobe" `
  -Protocol "Https" -HostName $portalHostname -Path "/signin" `
  -Interval 60 -Timeout 60 -UnhealthyThreshold 4
$apimManagementProbe = New-AzApplicationGatewayProbeConfig -Name "apimmanagementprobe" `
  -Protocol "Https" -HostName $managementHostname -Path "/ServiceStatus" `
  -Interval 60 -Timeout 60 -UnhealthyThreshold 4
  
$trustedRootDevPortalCertPath = "C:\Certs\example\example-dev-portal-signing-root.cer"
$trustedRootDevPortalCert = New-AzApplicationGatewayTrustedRootCertificate -Name "RootDevPortalCert" -CertificateFile $trustedRootDevPortalCertPath
$trustedRootLegacyDevPortalCertPath = "C:\Certs\example\example-legacy-portal-signing-root.cer"
$trustedRootLegacyDevPortalCert = New-AzApplicationGatewayTrustedRootCertificate -Name "RootLegacyDevPortalCert" -CertificateFile $trustedRootLegacyDevPortalCertPath
$trustedRootGatewayCertPath = "C:\Certs\example\example-gateway-signing-root.cer"
$trustedRootGatewayCert = New-AzApplicationGatewayTrustedRootCertificate -Name "RootGatewayCert" -CertificateFile $trustedRootGatewayCertPath
$trustedRootManagementCertPath = "C:\Certs\example\example-management-signing-root.cer"
$trustedRootManagementCert = New-AzApplicationGatewayTrustedRootCertificate -Name "RootManagementCertPath" -CertificateFile $trustedRootManagementCertPath

$apimPoolGatewaySetting = New-AzApplicationGatewayBackendHttpSettings -Name "apimPoolGatewaySetting" `
  -Port 443 -Protocol "Https" -CookieBasedAffinity "Enabled" -Probe $apimGatewayProbe `
  -TrustedRootCertificate $trustedRootGatewayCert -PickHostNameFromBackendAddress -RequestTimeout 180
$apimPoolPortalSetting = New-AzApplicationGatewayBackendHttpSettings -Name "apimPoolPortalSetting" `
  -Port 443 -Protocol "Https" -CookieBasedAffinity "Enabled" -Probe $apimPortalProbe `
  -TrustedRootCertificate $trustedRootDevPortalCert -PickHostNameFromBackendAddress -RequestTimeout 180
$apimPoolManagementSetting = New-AzApplicationGatewayBackendHttpSettings -Name "apimPoolManagementSetting" `
  -Port 443 -Protocol "Https" -CookieBasedAffinity "Enabled" -Probe $apimManagementProbe `
  -TrustedRootCertificate $trustedRootManagementCert -PickHostNameFromBackendAddress -RequestTimeout 180
  
$apimGatewayBackendPool = New-AzApplicationGatewayBackendAddressPool -Name "gatewaybackend" `
  -BackendFqdns $gatewayHostname
$apimPortalBackendPool = New-AzApplicationGatewayBackendAddressPool -Name "portalbackend" `
  -BackendFqdns $portalHostname
$apimManagementBackendPool = New-AzApplicationGatewayBackendAddressPool -Name "managementbackend" `
  -BackendFqdns $managementHostname
$sinkpool = New-AzApplicationGatewayBackendAddressPool -Name "sinkpool"

#Set up application gateway rules
$portalRule = New-AzApplicationGatewayRequestRoutingRule -Name "portalrule" `
  -RuleType Basic -HttpListener $portalListener -BackendAddressPool $apimPortalBackendPool `
  -BackendHttpSettings $apimPoolPortalSetting
$managementRule = New-AzApplicationGatewayRequestRoutingRule -Name "managementrule" `
  -RuleType Basic -HttpListener $managementListener -BackendAddressPool $apimManagementBackendPool `
  -BackendHttpSettings $apimPoolManagementSetting

$sku = New-AzApplicationGatewaySku -Name "WAF_v2" -Tier "WAF_v2" -Capacity 2

$config = New-AzApplicationGatewayWebApplicationFirewallConfiguration -Enabled $true -FirewallMode "Prevention"

$appgwName = "appgw-example-we-01"
$identityName = "appgw-uid-we-01"

$useridentity = New-AzUserAssignedIdentity -Name $identityName -ResourceGroupName $resGroupName -Location $location
$appgwIdentity = New-AzApplicationGatewayIdentity -UserAssignedIdentity $useridentity.Id

$appgw = New-AzApplicationGateway -Name $appgwName -ResourceGroupName $resGroupName -Location $location `
  -BackendAddressPools $apimGatewayBackendPool,$apimPortalBackendPool,$apimManagementBackendPool,$sinkpool `
  -BackendHttpSettingsCollection $apimPoolGatewaySetting, $apimPoolPortalSetting, $apimPoolManagementSetting `
  -FrontendIpConfigurations $fipconfig01 -GatewayIpConfigurations $gipconfig -FrontendPorts $fp01 `
  -HttpListeners $gatewayListener,$portalListener,$managementListener `
  -RequestRoutingRules $portalRule,$managementRule `
  -Sku $sku -WebApplicationFirewallConfig $config -SslCertificates $certGateway,$certPortal,$certManagement `
  -TrustedRootCertificate $trustedRootGatewayCert,$trustedRootDevPortalCert,$trustedRootManagementCert -Probes $apimGatewayProbe,$apimPortalProbe,$apimManagementProbe -Identity $appgwIdentity
  
#Set up path based rules
$appgw = Get-AzApplicationGateway -ResourceGroupName $resGroupName -Name $appgwName
$listener = Get-AzApplicationGatewayHttpListener -Name "gatewaylistener" -ApplicationGateway $appgw
$sinkpool = Get-AzApplicationGatewayBackendAddressPool -ApplicationGateway $appgw -Name "sinkpool"
$pool = Get-AzApplicationGatewayBackendAddressPool -ApplicationGateway $appgw -Name "gatewaybackend"
$poolSettings = Get-AzApplicationGatewayBackendHttpSettings -ApplicationGateway $appgw -Name "apimPoolGatewaySetting"

$pathRule = New-AzApplicationGatewayPathRuleConfig -Name "external" -Paths "/external/*" -BackendAddressPool $pool -BackendHttpSettings $poolSettings
$appgw = Add-AzApplicationGatewayUrlPathMapConfig -ApplicationGateway $appgw -Name "external-urlpathmapconfig" -PathRules $pathRule -DefaultBackendAddressPool $sinkpool -DefaultBackendHttpSettings $poolSettings
$appgw = Set-AzApplicationGateway -ApplicationGateway $appgw

$pathmap = Get-AzApplicationGatewayUrlPathMapConfig -ApplicationGateway $appgw -Name "external-urlpathmapconfig"
$appgw = Add-AzApplicationGatewayRequestRoutingRule -ApplicationGateway $appgw -Name "apim-gw-external-rule-01" -RuleType PathBasedRouting -HttpListener $listener -BackendAddressPool $Pool -BackendHttpSettings $poolSettings -UrlPathMap $pathMap
$appgw = Set-AzApplicationGateway -ApplicationGateway $appgw

